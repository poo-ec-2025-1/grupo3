import java.sql.*;
import com.j256.ormlite.jdbc.JdbcConnectionSource;

public class Database {
   private String databaseName = null;
   private JdbcConnectionSource connection = null;
   
   public Database(String databaseName) {
       this.databaseName = databaseName;
   }    
   
   public JdbcConnectionSource getConnection() throws SQLException {
      if ( databaseName == null ) {
            throw new SQLException("database name is null");
      }
      if ( connection == null ) {
            try {
              connection = new JdbcConnectionSource("jdbc:sqlite:"+databaseName);             
            } catch ( Exception e ) {
                    System.err.println( e.getClass().getName() + ": " + e.getMessage() );
                    System.exit(0);
            }
            System.out.println("Opened database successfully");
      }
      return connection;
   }
   
   public void close() {
       if ( connection != null ) {
           try {
               connection.close();
               this.connection = null;
           } catch (java.lang.Exception e) {
                System.err.println(e);
           }
       }
   }
}

|
|
|
|
|

import java.util.Date;
import java.text.SimpleDateFormat;
import com.j256.ormlite.table.DatabaseTable;
import com.j256.ormlite.field.DatabaseField;
import com.j256.ormlite.field.DataType;

@DatabaseTable(tableName = "usuario")

public abstract class Usuario {
    @DatabaseField(generatedId = true)
    private int id;
    
    @DatabaseField(dataType=DataType.STRING)
    private String nomeCompleto;
    
    @DatabaseField(dataType=DataType.INTEGER)
    private int matricula;
    
    @DatabaseField(dataType=DataType.STRING)
    private String senha;
    
    @DatabaseField(dataType=DataType.DOUBLE)
    private double saldo;
    
    /* Esse atributo ainda não foi implementado; no futuro ele seria responsável por
    * armazenar o email de contato do Usuario. 
    * @DatabaseField
    * private String email;
    */
    
    Usuario() {
        this.nomeCompleto = "N/A";
        this.matricula = 0;
        this.senha = "N/A";
        this.saldo = 0.0;
    }
    
    Usuario(String nomeCompleto, int matricula, String senha) {
        this.nomeCompleto = nomeCompleto;
        this.matricula = matricula;
        this.senha = senha;
        this.saldo = 0.0;
    }
   
    public boolean login(int matricula, String senha) {
        if(this.getMatricula() == matricula && this.getSenha() == senha) {
            return true;
        } else {
            return false;
        }
    }
    
    public String mostrarDados() {
        return "Nome: "+this.getNomeCompleto()+"\nMatricula: "+this.getMatricula();
    }
    
    public void depositar(double valor) {
        if(saldo <= 0) {
            throw new IllegalArgumentException("O valor a ser depositado deve ser positivo.");
        }
        this.saldo += valor;
    }
    
    public void debitar(double valor) {
        if(valor > this.saldo) {
            throw new IllegalStateException("Saldo insuficiente.");
        }
        this.saldo -= valor;
    }
    
//Start GetterSetterExtension Source Code
    
    /**SET Method Propertie id*/
    public void setId(int id) {
        this.id = id;
    }

    /**GET Method Propertie id*/
    public int getId() {
        return this.id;
    }

    /**SET Method Propertie nomeCompleto*/
    public void setNomeCompleto(String nome) {
        this.nomeCompleto = nome;
    }
    
    /**GET Method Propertie nomeCompleto*/
    public String getNomeCompleto() {
        return this.nomeCompleto;
    }
    
    /**SET Method Propertie matricula*/
    public void setMatricula(int matricula){
        this.matricula = matricula;
    }
   
    /**GET Method Propertie matricula*/
    public int getMatricula() {
        return this.matricula;
    }
   
    /**SET Method Propertie senha*/
    public void setSenha(String senha) {
        this.senha = senha;
    }
    
    /**GET Method Propertie senha*/
    public String getSenha() {
        return this.senha;
    }
    
    /**GET Method Propertie saldo*/
    public double getSaldo() {
        return this.saldo;
    }
    
//End GetterSetterExtension Source Code
}

|
|
|
|
|

public class Administrador extends Usuario implements Autenticavel {
    Administrador(String nomeCompleto, int matricula, String senha) {
        super(nomeCompleto, matricula, senha);
    }
    
    @Override
    public boolean login(int matricula, String senha) {
        if(this.getMatricula() == matricula && this.getSenha() == senha) {
            return true;
        } else {
            return false;
        }
    }
}

|
|
|
|
|

public class Cliente extends Usuario implements Autenticavel{
    Cliente(String nomeCompleto, int matricula, String senha) {
        super(nomeCompleto, matricula, senha);
    }
    
    @Override
    public boolean login(int matricula, String senha) {
        if(this.getMatricula() == matricula && this.getSenha() == senha) {
            return true;
        } else {
            return false;
        }
    }
}

|
|
|
|
|

public interface Autenticavel {
    public boolean login(int matricula, String senha);
}

|
|
|
|
|

import com.j256.ormlite.dao.DaoManager;
import com.j256.ormlite.dao.Dao;
import java.sql.SQLException;
import com.j256.ormlite.table.TableUtils;
import java.util.List;
import java.util.ArrayList;

public class UsuarioRepository {
    private static Database database;
    private static Dao<Usuario, Integer> dao;
    private List<Usuario> loadedUsuarios;
    private Usuario loadedUsuario;
    
    public UsuarioRepository(Database database) {
        UsuarioRepository.setDatabase(database);
        loadedUsuarios = new ArrayList<Usuario>();
    }
    
    public static void setDatabase(Database database) {
        UsuarioRepository.database = database;
        try {
            dao = DaoManager.createDao(database.getConnection(), Usuario.class);
            TableUtils.createTableIfNotExists(database.getConnection(), Usuario.class);
        }
        catch(SQLException e) {
            System.out.println(e);
        }            
    }
    
    public Usuario create(Usuario usuario) {
        int nrows = 0;
        try {
            nrows = dao.create(usuario);
            if ( nrows == 0 )
                throw new SQLException("Error: object not saved");
            this.loadedUsuario = usuario;
            loadedUsuarios.add(usuario);
        } catch (SQLException e) {
            System.out.println(e);
        }
        return usuario;
    }    

    public void update(Usuario usuario) throws SQLException {
      try {
            dao.update(usuario);
        } catch (SQLException e) {
            System.err.println("Erro ao atualizar o usuário: " + e.getMessage());
            throw new SQLException();
        }
    }

    public void delete(Usuario usuario) {
      try {
            dao.delete(usuario);
        } catch (SQLException e) {
            System.err.println("Erro ao deletar o usuário: " + e.getMessage());
        }
    }
    
    public void deletePorId(int id) {
        try {
            dao.deleteById(id);
        } catch(SQLException e) {
            System.err.println("Erro ao deletar o usuário: " +e.getMessage());
        }
    }
    
    public Usuario findFromId(int id) {
        try {
            this.loadedUsuario = dao.queryForId(id);
            if(id == 0) {
                System.out.println("ID inválido.");
            }
        } catch (SQLException e) {
            System.out.println(e);
        }
        return this.loadedUsuario;
    }
    
    public Usuario loadFromId(int id) {
        try {
            this.loadedUsuario = dao.queryForId(id);
            if (this.loadedUsuario != null)
                this.loadedUsuarios.add(this.loadedUsuario);
        } catch (SQLException e) {
            System.out.println(e);
        }
        return this.loadedUsuario;
    }    
    
    public List<Usuario> loadAll() {
        try {
            this.loadedUsuarios =  dao.queryForAll();
            if (this.loadedUsuarios.size() != 0)
                this.loadedUsuario = this.loadedUsuarios.get(0);
        } catch (SQLException e) {
            System.out.println(e);
        }
        return this.loadedUsuarios;
    }
}

|
|
|
|
|

import com.j256.ormlite.table.DatabaseTable;
import com.j256.ormlite.field.DatabaseField;

public abstract class Aparelho {
    @DatabaseField
    private int id;
    
    @DatabaseField
    private String modelo;
    
    @DatabaseField
    private String descricao;
    
    @DatabaseField
    private int capacidadeKg;
    
    @DatabaseField
    private boolean agendavel;
    
    @DatabaseField
    private boolean disponivel;
    
    @DatabaseField
    private boolean reservado;
    
    @DatabaseField
    private double custo;
    
    Aparelho() {
        this.id = 0;
        this.modelo = "N/A";
        this.descricao = "N/A";
        this.capacidadeKg = 0;
        this.agendavel = false;
        this.disponivel = false;
        this.custo = 0.0;
    }
    
    Aparelho(int id, String modelo, String descricao, int capacidadeKg, boolean agendavel, double custo) {
        this.id = id;
        this.modelo = modelo;
        this.descricao = descricao;
        this.capacidadeKg = capacidadeKg;
        this.agendavel = agendavel;
        this.disponivel = false;
        this.custo = 0.0;
    }
    
    public boolean reservar() {
        if (getAgendavel() && getDisponivel() && !getReservado()) {
            setReservado(true);
            setDisponivel(false);
            System.out.println("Aparelho " + getModelo() + " (ID: " + getId() + ") reservada com sucesso.");
            return true;
        } else {
            System.out.println("Aparelho " + getModelo() + " (ID: " + getId() + ") não pode ser reservada. Estado atual: Agendável=" + getAgendavel() + ", Disponível=" + getDisponivel() + ", Reservado=" + getReservado());
            return false;
        }
    }

    public void liberar() {
        if (getReservado() == true) {
            setReservado(false);
            setDisponivel(true);
            System.out.println("Aparelho " + getModelo() + " (ID: " + getId() + ") liberada.");
        } else {
            System.out.println("Aparelho " + getModelo() + " (ID: " + getId() + ") não estava reservada.");
        }
    }
    
//Start GetterSetterExtension Source Code
 
    /**SET Method Propertie id*/
    public void setId(int id) {
        this.id = id;
    }
    
    /**GET Method Propertie id*/
    public int getId() {
        return this.id;
    }
    
    /**SET Method Propertie modelo*/
    public void setModelo(String modelo) {
        this.modelo = modelo;   
    }
    
    /**GET Method Propertie modelo*/
    public String getModelo() {
        return this.modelo;
    }
    
    /**SET Method Propertie descricao*/
    public void setDescricao(String descricao) {
        this.descricao = descricao;   
    }
    
    /**GET Method Propertie descricao*/
    public String getDescricao() {
        return this.descricao;
    }
    
    /**SET Method Propertie capacidadeKg*/
    public void setCapacidadeKg(int capacidadeKg) {
        this.capacidadeKg = capacidadeKg;
    }
    
    /**GET Method Propertie capacidadeKg*/
    public int getCapacidadeKg() {
        return capacidadeKg;
    }
    
    /**SET Method Propertie agendavel*/
    public void setAgendavel(boolean agendavel) {
        this.agendavel = agendavel;   
    }
    
    /**GET Method Propertie agendavel*/
    public boolean getAgendavel() {
        return this.agendavel;
    }
    
    /**SET Method Propertie disponivel*/
    public void setDisponivel(boolean disponivel) {
        this.disponivel = disponivel;   
    }
    
    /**GET Method Propertie disponivel*/
    public boolean getDisponivel() {
        return this.disponivel;
    }
    
    /**SET Method Propertie reservado*/
    public void setReservado(boolean reservado) {
        this.reservado = reservado;
    }
    
    /**GET Method Propertie reservado*/
    public boolean getReservado() {
        return this.reservado;
    }
    
    /**SET Method Propertie custo*/
    public void setCusto(double custo) {
        this.custo = custo;
    }
    
    /**GET Method Propertie custo*/
    public double getCusto() {
        return this.custo;
    }
    
//End GetterSetterExtension Source Code
}

|
|
|
|
|
|

public class MaquinaDeLavar extends Aparelho implements Reservavel {
    public MaquinaDeLavar(int id, String modelo, String descricao, int capacidadeKg, boolean agendavel, double custo) {
        super(id, modelo, descricao, capacidadeKg, agendavel, custo);

    }

    @Override
    public boolean reservar() {
        if (getAgendavel() && getDisponivel() && !getReservado()) {
            setReservado(true);
            setDisponivel(false);
            System.out.println("Maquina " + getModelo() + " (ID: " + getId() + ") reservada com sucesso.");
            return true;
        } else {
            System.out.println("Maquina " + getModelo() + " (ID: " + getId() + ") não pode ser reservada. Estado atual: Agendável=" + getAgendavel() + ", Disponível=" + getDisponivel() + ", Reservado=" + getReservado());
            return false;
        }
    }

    @Override
    public void liberar() {
        if (getReservado() == true) {
            setReservado(false);
            setDisponivel(true);
            System.out.println("Maquina " + getModelo() + " (ID: " + getId() + ") liberada.");
        } else {
            System.out.println("Maquina " + getModelo() + " (ID: " + getId() + ") não estava reservada.");
        }
    }
}

|
|
|
|
|

public class Secadora extends Aparelho implements Reservavel {
    public Secadora(int id, String modelo, String descricao, int capacidadeKg, boolean agendavel, double custo) {
        super(id, modelo, descricao, capacidadeKg, agendavel, custo);

    }

    @Override
    public boolean reservar() {
        if (getAgendavel() && getDisponivel() && !getReservado()) {
            setReservado(true);
            setDisponivel(false);
            System.out.println("Secadora " + getModelo() + " (ID: " + getId() + ") reservada com sucesso.");
            return true;
        } else {
            System.out.println("Secadora " + getModelo() + " (ID: " + getId() + ") não pode ser reservada. Estado atual: Agendável=" + getAgendavel() + ", Disponível=" + getDisponivel() + ", Reservado=" + getReservado());
            return false;
        }
    }

    @Override
    public void liberar() {
        if (getReservado() == true) {
            setReservado(false);
            setDisponivel(true);
            System.out.println("Secadora " + getModelo() + " (ID: " + getId() + ") liberada.");
        } else {
            System.out.println("Secadora " + getModelo() + " (ID: " + getId() + ") não estava reservada.");
        }
    }
}

|
|
|
|
|
|

public interface Reservavel {
    public boolean reservar();
    
    public void liberar();
}

|
|
|
|
|

import com.j256.ormlite.dao.DaoManager;
import com.j256.ormlite.dao.Dao;
import java.sql.SQLException;
import com.j256.ormlite.table.TableUtils;
import java.util.List;
import java.util.ArrayList;

public class AparelhoRepository {
    private static Database database;
    private static Dao<Aparelho, Integer> dao;
    private List<Aparelho> loadedAparelhos;
    private Aparelho loadedAparelho;
    
    public AparelhoRepository(Database database) {
        AparelhoRepository.setDatabase(database);
        loadedAparelhos = new ArrayList<Aparelho>();
    }
    
    public static void setDatabase(Database database) {
        AparelhoRepository.database = database;
        try {
            dao = DaoManager.createDao(database.getConnection(), Aparelho.class);
            TableUtils.createTableIfNotExists(database.getConnection(), Aparelho.class);
        }
        catch(SQLException e) {
            System.out.println(e);
        }            
    }
    
    public Aparelho create(Aparelho aparelho) {
        int nrows = 0;
        try {
            nrows = dao.create(aparelho);
            if ( nrows == 0 )
                throw new SQLException("Error: object not saved");
            this.loadedAparelho = aparelho;
            loadedAparelhos.add(aparelho);
        } catch (SQLException e) {
            System.out.println(e);
        }
        return aparelho;
    }    

    public void update(Aparelho aparelho) {
      try {
            dao.update(aparelho);
        } catch (SQLException e) {
            System.err.println("Erro ao atualizar o aparelho: " + e.getMessage());
        }
    }

    public void delete(Aparelho aparelho) {
      try {
          dao.delete(aparelho);
      } catch(SQLException e) {
          System.err.println("Erro ao deletar o aparelho: " + e.getMessage());
      }
    }
    
    public Aparelho findFromId(int id) {
        try {
            this.loadedAparelho = dao.queryForId(id);
            if(id == 0) {
                System.out.println("ID inválido.");
            }
        } catch (SQLException e) {
            System.out.println(e);
        }
        return this.loadedAparelho;
    }
    
    public Aparelho loadFromId(int id) {
        try {
            this.loadedAparelho = dao.queryForId(id);
            if (this.loadedAparelho != null)
                this.loadedAparelhos.add(this.loadedAparelho);
        } catch (SQLException e) {
            System.out.println(e);
        }
        return this.loadedAparelho;
    }    
    
    public List<Aparelho> loadAll() {
        try {
            this.loadedAparelhos =  dao.queryForAll();
            if (this.loadedAparelhos.size() != 0)
                this.loadedAparelho = this.loadedAparelhos.get(0);
        } catch (SQLException e) {
            System.out.println(e);
        }
        return this.loadedAparelhos;
    }
}

|
|
|
|
|

import java.sql.SQLException;

public class Caixa {
    private final UsuarioRepository usuarioRepository;
    private final AparelhoRepository aparelhoRepository;
    private String mensagemDeAviso;
    
    public Caixa(UsuarioRepository usuarioRepository, AparelhoRepository aparelhoRepository) {
        this.usuarioRepository = usuarioRepository;
        this.aparelhoRepository = aparelhoRepository;
    }
    
    public boolean adicionarSaldo(int usuarioId, double valor, MetodoDePagamento listaMetodos) {
        try {
            Usuario usuario = usuarioRepository.findFromId(usuarioId);
            if(usuario == null) {
                mensagemDeAviso = ("Erro: Usuário com ID: " +usuarioId+ " não encontrado.");
                return false;
            }
            usuario.depositar(valor);
            usuarioRepository.update(usuario);
            mensagemDeAviso = ("Depósito feito com sucesso!");
            return true;
        } catch (SQLException e) {
            System.err.println("Erro no depósito.");
            return false;
        }
    }
    
    public boolean debitarSaldo(int usuarioId, int aparelhoId) {
        try {
            Usuario usuario = usuarioRepository.findFromId(usuarioId);
            Aparelho aparelho = aparelhoRepository.findFromId(aparelhoId);
            double valor = aparelho.getCusto();
            if(usuario == null) {
                mensagemDeAviso = ("Erro: Usuário com ID: " +usuarioId+ " não encontrado.");
                return false;
            }
            if(usuario.getSaldo() >= valor) {
                usuario.debitar(valor);
                usuarioRepository.update(usuario);
                mensagemDeAviso = ("Pagamento feito com sucesso!");
                return true;
            } else {
                mensagemDeAviso = ("Saldo insuficiente.");
                return false;
            }
        } catch (SQLException e) {
            System.err.println("Erro no pagamento.");
            return false;
        }
    }
}

|
|
|
|
|

import java.util.List;
import java.util.ArrayList;
import java.util.Collections;

public final class MetodoDePagamento {
    private static final List<String> listaMetodos;
    
    static {
        List<String> metodos = new ArrayList<>();
        metodos.add("Cartão de Débito");
        metodos.add("Cartão de Crédito");
        metodos.add("Pix");
        
        listaMetodos = Collections.unmodifiableList(metodos);
    }
}

***************************************************************************************************************

Sugestão de Miguel: que tal adicionar isso daqui? (Tenho que testar melhor ainda, mas pode ser interessante...)

public abstract class MaquinaLavar
{
    /**
     * Os atributos estáticos da classe fará parte do banco de dados
     */
    static int qtdMaquina = 0;
    static MaquinaLavar maquinasOfertadas[] = new MaquinaLavar[100];
    static double[] tempoOfertadoMaquinaS = new double[7];
    
    protected String idMaquina;
    protected int pesoMax;
    protected char tipoMaquina;
    protected double tempoOfertadoDaMaquina[] = Agenda.tempoDeFuncionamentoSemana;
    
    MaquinaLavar()
    {
        maquinasOfertadas[qtdMaquina] = this;
        qtdMaquina++;
        for (int i = 0; i < tempoOfertadoMaquinaS.length; i++)
        {
            tempoOfertadoMaquinaS[i] += Agenda.tempoDeFuncionamentoSemana[i];
        }
    }
}



public class MaquinaPesada extends MaquinaLavar
{
    static int qtdMaquina = 0;
    static double[] tempoOfertadoTotal = new double[7];
    
    public MaquinaPesada(String idMaquina)
    {
        this.idMaquina = idMaquina;
        pesoMax = 15;
        tipoMaquina = 'p';
        qtdMaquina++;
        for (int i = 0; i < tempoOfertadoTotal.length; i++)
        {
            tempoOfertadoTotal[i] += Agenda.tempoDeFuncionamentoSemana[i];
        }
    }
}


public class MaquinaPequena extends MaquinaLavar
{
    static int qtdMaquina = 0;
    static double[] tempoOfertadoMaquinaS = new double[7];
    
    public MaquinaPequena(String idMaquina)
    {
        this.idMaquina = idMaquina;
        pesoMax = 5;
        tipoMaquina = 'l';
        qtdMaquina++;
        for (int i = 0; i < tempoOfertadoMaquinaS.length; i++)
        {
            tempoOfertadoMaquinaS[i] += Agenda.tempoDeFuncionamentoSemana[i];
        }
    }
}



public class MaquinaMedia extends MaquinaLavar
{
    static int qtdMaquina = 0;
    static double[] tempoOfertadoMaquinaS = new double[7];
    
    public MaquinaMedia(String idMaquina)
    {
        this.idMaquina = idMaquina;
        pesoMax = 8;
        tipoMaquina = 'm';
        qtdMaquina++;
        for (int i = 0; i < tempoOfertadoMaquinaS.length; i++)
        {
            tempoOfertadoMaquinaS[i] += Agenda.tempoDeFuncionamentoSemana[i];
        }
    }
}




