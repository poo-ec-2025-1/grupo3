

/*
 esta classe sistema será o que conecta todos os processos e os realiza
 */
import java.util.Scanner;

public class Sistema {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Digite sua matrícula: ");
        int matricula = scanner.nextInt();

        System.out.println("Pese sua roupa, veja o valor e digite aqui: ");
        int peso = scanner.nextInt();

        // Criar a máquina certa para o peso informado
        MaquinaLavar maquina = MaquinaLavar.criarMaquina(peso);

        // Chamar o método lavar
        maquina.lavar();

        System.out.println("Matrícula: " + matricula + " - Processo de lavagem concluído.");

        Caixa.cobrar(maquina, matricula);

        scanner.close();
    }
}

  /*
   esta classe depende diretamente das demais, as quais ainda estão em desenvolvimento
   desta forma esta classe fica assim. Será analisada e desenvolvida mais adiante 
   */

|
|
|
|
|
|

import java.sql.*;
import com.j256.ormlite.jdbc.JdbcConnectionSource;

public class Database {
   private String databaseName = null;
   private JdbcConnectionSource connection = null;
   
   public Database(String databaseName) {
   	this.databaseName = databaseName;
   }    
   
   public JdbcConnectionSource getConnection() throws SQLException {
  	if ( databaseName == null ) {
      	throw new SQLException("database name is null");
  	}
  	if ( connection == null ) {
      	try {
          	connection = new JdbcConnectionSource("jdbc:sqlite:"+databaseName);        	 
        	} catch ( Exception e ) {
            	System.err.println( e.getClass().getName() + ": " + e.getMessage() );
            	System.exit(0);
        	}
        	System.out.println("Opened database successfully");
  	}
  	return connection;
   }
   
   public void close() {
   	if ( connection != null ) {
       	try {
           	connection.close();
           	this.connection = null;
       	} catch (java.lang.Exception e) {
           	System.err.println(e);
       	}
   	}
   }
}

|
|
|
|
|

import com.j256.ormlite.table.DatabaseTable;
import com.j256.ormlite.field.DatabaseField;

@DatabaseTable(tableName = "usuario")

public abstract class Usuario {
	@DatabaseField
	private String nomeCompleto;
    
	@DatabaseField
	private int matricula;
    
	@DatabaseField
	private String senha;
   
	/* Esse atributo ainda não foi implementado; no futuro ele será responsável por
	* armazenar o email de contato do Usuario. 
	* @DatabaseField
        * private String email;
        */
	
	Usuario() {
   	 
	}
    
	Usuario(String nomeCompleto, int matricula, String senha) {
        this.nomeCompleto = nomeCompleto;
        this.matricula = matricula;
        this.senha = senha;
    	}
   
	public String mostrarDados() {
    	return "Nome: "+this.getNomeCompleto()+"\nMatricula: "+this.getMatricula();
	}
    
	public void setNomeCompleto(String nome) {
    	this.nomeCompleto = nome;
	}
    
	public String getNomeCompleto() {
    	return this.nomeCompleto;
	}
    
	public void setMatricula(int matricula){
    	this.matricula = matricula;
	}
   
	public int getMatricula() {
    	return this.matricula;
	}
   
	public void setSenha(String senha) {
    	this.senha = senha;
	}
    
	public String getSenha() {
    	return this.senha;
	}
}

|
|
|
|
|

public class Administrador extends Usuario implements Autenticavel {
	Administrador(String nomeCompleto, int matricula, String senha) {
    	super(nomeCompleto, matricula, senha);
    	}
    
	public boolean login(int matricula, String senha) {
    	if(this.getMatricula() == matricula && this.getSenha() == senha) {
        	return true;
    	} else {
        	return false;
    	}
	}
}

|
|
|
|
|

public class Cliente extends Usuario implements Autenticavel{
	Cliente(String nomeCompleto, int matricula, String senha) {
        super(nomeCompleto, matricula, senha);
    	}
    
	public boolean login(int matricula, String senha) {
    	if(this.getMatricula() == matricula && this.getSenha() == senha) {
        	return true;
    	} else {
        	return false;
    	}
	}
}

|
|
|
|
|

public interface Autenticavel {
	public boolean login(int matricula, String senha);
}

|
|
|
|
|

public class UsuarioRepository
{
	private static Database database;
	private static Dao<Usuario, Integer> dao;
	private List<Usuario> loadedUsuarios;
	private Usuario loadedUsuario;
    
	public UsuarioRepository(Database database) {
    	UsuarioRepository.setDatabase(database);
    	loadedUsuarios = new ArrayList<Usuario>();
	}
    
	public static void setDatabase(Database database) {
    	UsuarioRepository.database = database;
    	try {
        	dao = DaoManager.createDao(database.getConnection(), Usuario.class);
        	TableUtils.createTableIfNotExists(database.getConnection(), Usuario.class);
    	}
    	catch(SQLException e) {
        	System.out.println(e);
    	}       	 
	}
    
	public Usuario create(Usuario usuario) {
    	int nrows = 0;
    	try {
        	nrows = dao.create(usuario);
        	if ( nrows == 0 )
            	throw new SQLException("Error: object not saved");
        	this.loadedUsuario = usuario;
        	loadedUsuarios.add(usuario);
    	} catch (SQLException e) {
        	System.out.println(e);
    	}
    	return usuario;
	}    

	public void update(Usuario usuario) {
  	// TODO
	}

	public void delete(Usuario usuario) {
  	// TODO
	}
    
	public Usuario loadFromId(int id) {
    	try {
        	this.loadedUsuario = dao.queryForId(id);
        	if (this.loadedUsuario != null)
            	this.loadedUsuarios.add(this.loadedUsuario);
    	} catch (SQLException e) {
        	System.out.println(e);
    	}
    	return this.loadedUsuario;
	}    
    
	public List<Usuario> loadAll() {
    	try {
        	this.loadedUsuarios =  dao.queryForAll();
        	if (this.loadedUsuarios.size() != 0)
            	this.loadedUsuario = this.loadedUsuarios.get(0);
    	} catch (SQLException e) {
        	System.out.println(e);
    	}
    	return this.loadedUsuarios;
	}
}

|
|
|
|
|



public abstract class MaquinaLavar {
    public int pesoMax;

    public MaquinaLavar(int pesoMax) {
        this.pesoMax = pesoMax;
    }

    public abstract void lavar();
    
    public abstract double getPreco();

    // Método estático para criar a máquina correta
    public static MaquinaLavar criarMaquina(int pesoRoupa) {
        if (pesoRoupa <= 5) {
            return new MaquinaPequena();
        } else if (pesoRoupa > 5 && pesoRoupa < 10) {
            return new MaquinaMedia();
        } else {
            return new MaquinaPesada();
        }
    }
}


|
|
|
|
|
|


public class MaquinaPequena extends MaquinaLavar {

    public MaquinaPequena() {
        super(5);
    }

    @Override
    public void lavar() {
        System.out.println("Lavando com máquina PEQUENA de até " + pesoMax + "kg.");
    }
    
    @Override
    public double getPreco() {
        return 3.00;
    }
}




|
|
|
|
|



public class MaquinaMedia extends MaquinaLavar {

    public MaquinaMedia() {
        super(8);
    }

    @Override
    public void lavar() {
        System.out.println("Lavando com máquina MÉDIA de até " + pesoMax + "kg.");
    }
    
     @Override
    public double getPreco() {
        return 6.00;
    }
}



|
|
|
|
|
|



public class MaquinaPesada extends MaquinaLavar {

    public MaquinaPesada() {
        super(15);
    }

    @Override
    public void lavar() {
        System.out.println("Lavando com máquina PESADA de até " + pesoMax + "kg.");
    }
    
     @Override
    public double getPreco() {
        return 9.00;
    }
}




|
|
|
|
|
|


public class Caixa {

    public static void cobrar(MaquinaLavar maquina, int matricula) {
        double valor = maquina.getPreco();
        System.out.println("Matrícula: " + matricula);
        System.out.println("Total a pagar: R$ " + String.format("%.2f", valor));
    }
}


Sugestão de Miguel: que tal adicionar isso daqui? (Tenho que testar melhor ainda, mas pode ser interessante...)

public abstract class MaquinaLavar
{
    /**
     * Os atributos estáticos da classe fará parte do banco de dados
     */
    static int qtdMaquina = 0;
    static MaquinaLavar maquinasOfertadas[] = new MaquinaLavar[100];
    static double[] tempoOfertadoMaquinaS = new double[7];
    
    protected String idMaquina;
    protected int pesoMax;
    protected char tipoMaquina;
    protected double tempoOfertadoDaMaquina[] = Agenda.tempoDeFuncionamentoSemana;
    
    MaquinaLavar()
    {
        maquinasOfertadas[qtdMaquina] = this;
        qtdMaquina++;
        for (int i = 0; i < tempoOfertadoMaquinaS.length; i++)
        {
            tempoOfertadoMaquinaS[i] += Agenda.tempoDeFuncionamentoSemana[i];
        }
    }
}



public class MaquinaPesada extends MaquinaLavar
{
    static int qtdMaquina = 0;
    static double[] tempoOfertadoTotal = new double[7];
    
    public MaquinaPesada(String idMaquina)
    {
        this.idMaquina = idMaquina;
        pesoMax = 15;
        tipoMaquina = 'p';
        qtdMaquina++;
        for (int i = 0; i < tempoOfertadoTotal.length; i++)
        {
            tempoOfertadoTotal[i] += Agenda.tempoDeFuncionamentoSemana[i];
        }
    }
}


public class MaquinaPequena extends MaquinaLavar
{
    static int qtdMaquina = 0;
    static double[] tempoOfertadoMaquinaS = new double[7];
    
    public MaquinaPequena(String idMaquina)
    {
        this.idMaquina = idMaquina;
        pesoMax = 5;
        tipoMaquina = 'l';
        qtdMaquina++;
        for (int i = 0; i < tempoOfertadoMaquinaS.length; i++)
        {
            tempoOfertadoMaquinaS[i] += Agenda.tempoDeFuncionamentoSemana[i];
        }
    }
}



public class MaquinaMedia extends MaquinaLavar
{
    static int qtdMaquina = 0;
    static double[] tempoOfertadoMaquinaS = new double[7];
    
    public MaquinaMedia(String idMaquina)
    {
        this.idMaquina = idMaquina;
        pesoMax = 8;
        tipoMaquina = 'm';
        qtdMaquina++;
        for (int i = 0; i < tempoOfertadoMaquinaS.length; i++)
        {
            tempoOfertadoMaquinaS[i] += Agenda.tempoDeFuncionamentoSemana[i];
        }
    }
}




